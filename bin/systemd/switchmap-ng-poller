#!/usr/bin/env python3
"""Switchmap-NG ingest cache daemon.

Extracts agent data from cache directory files.

"""

# Standard libraries
import time
import sys
import os
from multiprocessing import Pool

# Try to create a working PYTHONPATH
_SYS_DIRECTORY = os.path.dirname(os.path.realpath(__file__))
_BIN_DIRECTORY = os.path.abspath(os.path.join(_SYS_DIRECTORY, os.pardir))
_ROOT_DIRECTORY = os.path.abspath(os.path.join(_BIN_DIRECTORY, os.pardir))
if _SYS_DIRECTORY.endswith('/switchmap-ng/bin/systemd') is True:
    sys.path.append(_ROOT_DIRECTORY)
else:
    print(
        'This script is not installed in the "switchmap-ng/bin/systemd" '
        'directory. Please fix.')
    sys.exit(2)

# switchmap.libraries
try:
    from switchmap.utils import log
except:
    print('You need to set your PYTHONPATH to include the switchmap library')
    sys.exit(2)
from switchmap.constants import CONFIG, CONFIG_SNMP
from switchmap.utils import general
from switchmap.process import device
from switchmap.process import tables
from switchmap.main import agent
from switchmap.main.agent import Agent
from switchmap.constants import POLLER_EXECUTABLE


class PollingAgent(Agent):
    """Switchmap-NG agent that gathers data.

    Args:
        None

    Returns:
        None

    Functions:
        __init__:
        populate:
        post:
    """

    def __init__(self, parent):
        """Method initializing the class.

        Args:
            config_dir: Configuration directory

        Returns:
            None

        """
        # Initialize key variables
        Agent.__init__(self, parent)

        # Get configuration
        self.server_config = CONFIG
        self.snmp_config = CONFIG_SNMP

    def query(self):
        """Query all remote hosts for data.

        Args:
            None

        Returns:
            None

        """
        # Initialize key variables
        delay = self.server_config.polling_interval()
        ts_poller_start = int(time.time())

        # Post data to the remote server
        while True:
            ts_loop_start = int(time.time())
            log_message = ('Starting device polling sequence.')
            log.log2info(1056, log_message)

            # Delete temporary topology directory files
            temp_topology_directory = (
                self.server_config.temp_topology_directory())
            if os.path.isdir(temp_topology_directory):
                general.delete_files(temp_topology_directory)

            # Poll after sleeping
            _poll_devices()

            # Create search files
            tables.SearchFiles().create()

            # Modify temp yaml files to include IP address and
            # Delete permanent topology directory files
            topology_directory = self.server_config.topology_directory()
            if os.path.isdir(topology_directory):
                general.delete_files(topology_directory)

            # Move files to topology directory
            general.move_files(
                temp_topology_directory, topology_directory)

            looptime   = int(time.time()) - ts_loop_start
            pollertime = int(time.time()) - ts_poller_start
            log_message = (
                'Completed device polling sequence. {}s loop duration, {}s poller uptime'
                ''.format(looptime, pollertime)
            log.log2info(1125, log_message)

            # Sleep for "delay" seconds
            agent.agent_sleep(self.name(), delay)


def _poll_devices():
    """Poll all devices for data using subprocesses and create YAML files.

    Args:
        None

    Returns:
        None

    """
    # Get configuration
    config = CONFIG

    # Get the number of threads to use in the pool
    threads_in_pool = config.agent_threads()

    # Create a list of polling objects
    hostnames = sorted(config.hostnames())

    # Create a pool of sub process resources
    with Pool(processes=threads_in_pool) as pool:

        # Create sub processes from the pool
        pool.map(_poll_single_device, hostnames)


def _poll_single_device(hostname):
    """Poll single device for data and create YAML files.

    Args:
        None

    Returns:
        None

    """
    # Poll data for obviously valid hostnames (eg. "None" used in installation)
    if bool(hostname) is True:
        if isinstance(hostname, str) is True:
            if hostname.lower() != 'none':
                _device = device.Device(hostname)
                _device.save()

                # Save the idle times
                idletimes = device.IdleTimes(hostname)
                idletimes.save()


def main():
    """Start the switchmap.agent.

    Args:
        None

    Returns:
        None

    """
    # Check user
    general.check_user()

    # Get configuration
    agent_poller = PollingAgent(POLLER_EXECUTABLE)

    # Do control
    cli = agent.AgentCLI()
    cli.control(agent_poller)


if __name__ == "__main__":
    # Poller('192.168.1.1')._create_yaml()
    # _poll_devices()
    main()
