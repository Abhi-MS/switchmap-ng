#!/usr/bin/env python3
"""Switchmap-NG ingest cache daemon.

Extracts agent data from cache directory files.

"""

# Standard libraries
import sys
import os
import csv
from multiprocessing import Pool
from collections import defaultdict
import socket

# PIP3 imports
import yaml

# Try to create a working PYTHONPATH
script_directory = os.path.dirname(os.path.realpath(__file__))
root_directory = os.path.abspath(os.path.join(script_directory, os.pardir))
if script_directory.endswith('/switchmap-ng/bin') is True:
    sys.path.append(root_directory)
else:
    print(
        'This script is not installed in the "switchmap-ng/bin" directory. '
        'Please fix.')
    sys.exit(2)

# switchmap.libraries
try:
    from switchmap.agents import agent as Agent
except:
    print('You need to set your PYTHONPATH to include the switchmap library')
    sys.exit(2)
from switchmap.utils import configuration
from switchmap.utils import general
from switchmap.utils import log
from switchmap.snmp import snmp_info
from switchmap.snmp import snmp_manager
from switchmap.topology import postpoll


def _oui():
    """Get dictionary of OUI values.

    Args:
        None

    Returns:
        oui: OUI dictionary

    """
    # Get configuration
    config = configuration.Config()
    mac_address_file = config.mac_address_file()
    oui = {}

    # Read file
    with open(mac_address_file, 'r') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=':')
        for row in spamreader:
            mac_address = row[0]
            manufacturer = row[1]
            oui[mac_address] = manufacturer

    # Return
    return oui


# Get OUI value
OUI = _oui()


class PollingAgent(object):
    """Switchmap-NG agent that gathers data.

    Args:
        None

    Returns:
        None

    Functions:
        __init__:
        populate:
        post:
    """

    def __init__(self):
        """Method initializing the class.

        Args:
            config_dir: Configuration directory

        Returns:
            None

        """
        # Initialize key variables
        self.agent_name = 'topology'

        # Get configuration
        self.server_config = configuration.Config()
        self.snmp_config = configuration.ConfigSNMP()

    def name(self):
        """Return agent name.

        Args:
            None

        Returns:
            value: Name of agent

        """
        # Return
        value = self.agent_name
        return value

    def query(self):
        """Query all remote hosts for data.

        Args:
            None

        Returns:
            None

        """
        # Initialize key variables
        delay = 3600

        # Post data to the remote server
        while True:
            # Delete temporary topology directory files
            temp_topology_directory = (
                self.server_config.temp_topology_directory())
            if os.path.isdir(temp_topology_directory):
                general.delete_files(temp_topology_directory)

            # Poll after sleeping
            _poll_devices()

            # Create search files
            _create_search_files()

            # Add Hostname and IP address data to temp files
            postpoll.all_devices()

            # Modify temp yaml files to include IP address and
            # Delete permanent topology directory files
            topology_directory = self.server_config.topology_directory()
            if os.path.isdir(topology_directory):
                general.delete_files(topology_directory)

            # Move files to topology directory
            general.move_files(
                temp_topology_directory, topology_directory)

            # Sleep for "delay" seconds
            Agent.agent_sleep(self.name(), delay)


class Poller(object):
    """Switchmap-NG agent that gathers data.

    Args:
        None

    Returns:
        None

    Functions:
        __init__:
        populate:
        post:
    """

    def __init__(self, hostname):
        """Method initializing the class.

        Args:
            hostname: Hostname to poll

        Returns:
            None

        """
        # Initialize key variables
        self.server_config = configuration.Config()
        snmp_config = configuration.ConfigSNMP()
        self.hostname = hostname

        # Get snmp configuration information from Switchmap-NG
        validate = snmp_manager.Validate(hostname, snmp_config.snmp_auth())
        self.snmp_params = validate.credentials()
        self.snmp_object = snmp_manager.Interact(self.snmp_params)

    def query(self):
        """Query all remote hosts for data.

        Args:
            None

        Returns:
            None

        """
        # Check SNMP supported
        if bool(self.snmp_params) is True:
            # Get datapoints
            self._create_yaml()
        else:
            log_message = (
                'Uncontactable host %s or no valid SNMP '
                'credentials found for it.') % (self.hostname)
            log.log2info(1021, log_message)

    def _create_yaml(self):
        """Create the master dictionary for the host.

        Args:
            None
        Returns:
            value: Index value

        """
        # Initialize key variables
        global OUI
        temp_dir = self.server_config.temp_topology_directory()
        temp_file = ('%s/%s.yaml') % (temp_dir, self.hostname)

        # Get data
        log_message = (
            'Querying topology data from host %s.'
            '') % (self.hostname)
        log.log2info(1125, log_message)

        # Create YAML file by polling device
        status = snmp_info.Query(self.snmp_object)
        data = status.everything()

        # Add additional switchmap-ng specific fields to the dict
        augmented_data = postpoll.Process(data, OUI).augmented_data()
        yaml_string = general.dict2yaml(augmented_data)

        # Dump data
        with open(temp_file, 'w') as file_handle:
            file_handle.write(yaml_string)

        # Get data
        log_message = (
            'Completed topology query from host %s.'
            '') % (self.hostname)
        log.log2info(1019, log_message)


def _poll_devices():
    """Poll all devices for data using subprocesses and create YAML files.

    Args:
        None

    Returns:
        None

    """
    # Get configuration
    config = configuration.Config()

    # Get the number of threads to use in the pool
    threads_in_pool = config.agent_threads()

    # Create a list of polling objects
    hostnames = sorted(config.hostnames())

    # Create a pool of sub process resources
    with Pool(processes=threads_in_pool) as pool:

        # Create sub processes from the pool
        pool.map(_poll_single_device, hostnames)


def _poll_single_device(hostname):
    """Poll single device for data and create YAML files.

    Args:
        None

    Returns:
        None

    """
    # Poll data
    poller = Poller(hostname)
    poller.query()


def _create_search_files():
    """Creates YAML files used for Switchmap-NG search.

    Args:
        None

    Returns:
        None

    """
    # Initialize key variables
    config = configuration.Config()
    topology_directory = config.topology_directory()
    arp_table = defaultdict(lambda: defaultdict(dict))
    host_table = {}
    ifalias_table = defaultdict(lambda: defaultdict(dict))
    rarp_table = {}
    ifindex_table = defaultdict(
        lambda: defaultdict(lambda: defaultdict(dict)))

    # Send log message
    log_message = ('Starting search file creation.')
    log.log2info(1125, log_message)

    # Create ARP and RARP table files
    # Cycle through list of files in directory
    for filename in os.listdir(topology_directory):
        # Examine all the '.yaml' files in directory
        if filename.endswith('.yaml'):
            # Read file
            filepath = config.topology_device_file(filename[0:-5])
            device_dict = general.read_yaml_file(filepath)

            # Populate ARP table
            if 'layer3' in device_dict:
                keys = ['cInetNetToMediaPhysAddress', 'ipNetToMediaTable']
                for key in keys:
                    if key in device_dict['layer3']:
                        arp_dict = device_dict['layer3'][key]
                        for ip_address, mac_address in arp_dict.items():
                            # Populate ARP table
                            arp_table[ip_address]['mac_address'] = mac_address
                            try:
                                ip_results = socket.gethostbyaddr(ip_address)
                                if len(ip_results) > 1:
                                    hostname = ip_results[0]
                                    arp_table[
                                        ip_address]['hostname'] = hostname
                                    host_table[hostname] = ip_address

                            except:
                                arp_table[ip_address]['hostname'] = None

                            # Populate RARP table (Using ARP entries)
                            if mac_address in rarp_table:
                                # Only append unique entries
                                if ip_address not in rarp_table[mac_address]:
                                    rarp_table[mac_address].append(ip_address)
                            else:
                                rarp_table[mac_address] = [ip_address]

    # Create ifIndex file after creating complete ARP and RARP table files
    # Cycle through list of files in directory
    for filename in os.listdir(topology_directory):
        # Examine all the '.yaml' files in directory
        if filename.endswith('.yaml'):
            # Read file
            filepath = config.topology_device_file(filename[0:-5])
            device_dict = general.read_yaml_file(filepath)

            # Get the device name
            device_name = device_dict['misc']['host']

            # Populate ifIndex table
            if 'layer1' in device_dict:
                layer1_dict = device_dict['layer1']
                # Process each port on device
                for ifindex, port_dict in layer1_dict.items():
                    # Only interested in Ethernet ports
                    if bool(port_dict['jm_ethernet']) is False:
                        continue

                    # We are not interested in populating trunk port MAC data
                    if bool(port_dict['jm_trunk']) is True:
                        continue

                    # Create ifalias entry
                    ifalias = port_dict['ifAlias'].strip()
                    if bool(ifalias) is True:
                        if ifalias not in ifalias_table:
                            ifalias_table[ifalias][device_name] = [ifindex]
                        else:
                            if device_name not in ifalias_table[ifalias]:
                                ifalias_table[ifalias][device_name] = [ifindex]
                            else:
                                ifalias_table[
                                    ifalias][device_name].append(ifindex)

                    # Process MAC addresses
                    if ('jm_macs' in port_dict) and (
                            bool(port_dict['jm_macs']) is True):

                        # Create an ifIndex and device entry
                        # for each RARP entry
                        for mac_address in port_dict['jm_macs']:
                            # Populate RARP table. Not all MACs have
                            # an associated ARP IP address (eg. multicast)
                            if mac_address not in rarp_table:
                                rarp_table[mac_address] = []

                            # Create ifindex entry
                            for ip_address in rarp_table[mac_address]:
                                if bool(ifindex_table[mac_address][
                                        device_name][ifindex]) is True:
                                    ifindex_table[mac_address][device_name][
                                        ifindex].append(ip_address)
                                else:
                                    ifindex_table[mac_address][device_name][
                                        ifindex] = [ip_address]

    # Create yaml files
    general.create_yaml_file(arp_table, config.arp_file())
    general.create_yaml_file(rarp_table, config.rarp_file())
    general.create_yaml_file(ifindex_table, config.ifindex_file())
    general.create_yaml_file(ifalias_table, config.ifalias_file())
    general.create_yaml_file(host_table, config.hosts_file())

    # Send log message
    log_message = ('Completed search file creation.')
    log.log2info(1125, log_message)


def main():
    """Start the switchmap.agent.

    Args:
        None

    Returns:
        None

    """
    # Get configuration
    cli = Agent.AgentCLI()
    poller = PollingAgent()

    # Do control
    cli.control(poller)

if __name__ == "__main__":
    # Poller('absw01.sjc01.corp.colovore.net')._create_yaml()
    # _poll_devices()
    main()
